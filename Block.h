#pragma once
#include <vector>
#include <functional>
using namespace std;
enum Dir { Left, Right, Down };
#define SIZE 4
class Block{
public:
	Block();
	~Block();
	void SetKind(int kind);
	int GetKind();
	int GetDir();
	vector<pair<int, int>>& GetPos();
	vector<pair<int, int>> GetRotatePos();
	void Erase();
	void Erase(int plus_y, int plus_x);
	void Print(int color = 0);
	void Print(int plus_y, int plus_x);
	void Move(Dir dir);
	void Rotate();
	bool isPossibleToMove(Dir dir);
	bool isPossibleToRotate();
private:
	int curr_kind, curr_dir;
	vector<pair<int, int>> pos;
	const pair<int, int> shape[7][4][4] = {
		//	д▒д▒д▒д▒
		//				д▒
		//				д▒
		//				д▒
		//				д▒
		{
			{ { 0,0 },{ 0,1 },{ 0,2 },{ 0,3 } },
			{ { 0,0 },{ 1,0 },{ 2,0 },{ 3,0 } },
			{ { 0,0 },{ 0,1 },{ 0,2 },{ 0,3 } },
			{ { 0,0 },{ 1,0 },{ 2,0 },{ 3,0 } }
		},
		//	бр		
		//	брбрбр
		//			брбр
		//			бр
		//			бр
		//					брбрбр
		//					  бр
		//							бр
		//							бр
		//						   брбр
		{
			{ { 0,0 },{ 1,0 },{ 1,1 },{ 1,2 } },
			{ { 0,0 },{ 0,1 },{ 1,0 },{ 2,0 } },
			{ { 0,0 },{ 0,1 },{ 0,2 },{ 1,2 } },
			{ { 0,1 },{ 1,1 },{ 2,1 },{ 2,0 } }
		},
		//	  бр
		//  брбрбр
		//			бр
		//			бр
		//			брбр
		//					брбрбр
		//					бр
		//							брбр
		//							 бр
		//							 бр
		{
			{ { 0,2 },{ 1,0 },{ 1,1 },{ 1,2 } },
			{ { 0,0 },{ 1,0 },{ 2,0 },{ 2,1 } },
			{ { 0,0 },{ 0,1 },{ 0,2 },{ 1,0 } },
			{ { 0,0 },{ 0,1 },{ 1,1 },{ 2,1 } }
		},
		//	брбр
		//	брбр
		{
			{ { 0,0 },{ 0,1 },{ 1,0 },{ 1,1 } },
			{ { 0,0 },{ 0,1 },{ 1,0 },{ 1,1 } },
			{ { 0,0 },{ 0,1 },{ 1,0 },{ 1,1 } },
			{ { 0,0 },{ 0,1 },{ 1,0 },{ 1,1 } }
		},
		//	брбр
		// брбр
		//			бр
		//			брбр
		//			 бр
		{
			{ { 0,1 },{ 0,2 },{ 1,0 },{ 1,1 } },
			{ { 0,0 },{ 1,0 },{ 1,1 },{ 2,1 } },
			{ { 0,1 },{ 0,2 },{ 1,0 },{ 1,1 } },
			{ { 0,0 },{ 1,0 },{ 1,1 },{ 2,1 } }
		},
		//	  бр
		//	 брбрбр
		//			бр
		//			брбр
		//			бр
		//					брбрбр
		//					 бр
		//							бр
		//		  				   брбр
		//							бр
		
		{
			{ { 0,1 },{ 1,0 },{ 1,1 },{ 1,2 } },
			{ { 0,0 },{ 1,0 },{ 1,1 },{ 2,0 } },
			{ { 0,0 },{ 0,1 },{ 0,2 },{ 1,1 } },
			{ { 0,1 },{ 1,0 },{ 1,1 },{ 2,1 } }
		},
		//	брбр
		//	 брбр
		//			бр
		//		   брбр
		//		   бр
		{
			{ { 0,0 },{ 0,1 },{ 1,1 },{ 1,2 } },
			{ { 0,1 },{ 1,0 },{ 1,1 },{ 2,0 } },
			{ { 0,0 },{ 0,1 },{ 1,1 },{ 1,2 } },
			{ { 0,1 },{ 1,0 },{ 1,1 },{ 2,0 } }
		}
	};
};

